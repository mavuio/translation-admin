// Generated by CoffeeScript 1.6.2
angular.module("translation-admin").directive("translationAdminItem", function() {
  return {
    restrict: "A",
    replace: true,
    templateUrl: '/packages/werkzeugh/translation-admin/ng/translation-admin/partials/translation-admin-item.html',
    scope: true,
    link: function(scope, element, attrs) {},
    controller: [
      "$scope", "$element", "$attrs", "$timeout", "$transclude", "$http", "$q", function($scope, $element, $attrs, $timeout, $transclude, $http, $q) {
        $scope.$on('expand_item', function(event, id) {
          var item;

          item = $scope.getItemForId(id);
          if (item && !item.expanded) {
            $scope.toggleItem(item);
            if (window.console && console.log) {
              return console.log("expand event on ", id, item);
            }
          }
        });
        $scope.tinymceOptions = {
          menubar: false,
          plugins: ["code fullscreen contextmenu autoresize link"],
          toolbar1: "bold italic | undo redo | link unlink | removeformat | code fullscreen",
          autoresize_min_height: 100,
          autoresize_max_height: 600,
          forced_root_block: false
        };
        $scope.toggleItem = function(item, e) {
          var newval;

          newval = (item.expanded ? false : true);
          if ($scope.app.currentExpandedItem && $scope.app.currentExpandedItem !== item) {
            $scope.app.currentExpandedItem.expanded = false;
            $scope.app.currentExpandedItem = null;
          }
          if (newval === true) {
            if (typeof item.data === "undefined") {
              item.record1 = {
                loading: true
              };
              item.record2 = {
                loading: true
              };
              $scope.loadDetailsForItem(item.lang1_id, item.lang2_id).then(function(itemdata) {
                item.record1 = itemdata.record1;
                return item.record2 = itemdata.record2;
              });
            }
            $scope.app.currentExpandedItem = item;
            $scope.updateUrl({
              hash: item.lang1_id
            });
            $timeout(function() {
              return angular.element('.savebutton').focus();
            }, 200);
          }
          item.expanded = newval;
          if ($scope.app.currentExpandedItem && !$scope.app.currentExpandedItem.expanded) {
            return $scope.updateUrl({
              path: 'empty'
            });
          }
        };
        $scope.saveItem = function(item, idx) {
          return $scope.saveDetailsForItem(item.record1, item.record2).then(function(responsedata) {
            angular.copy(responsedata.item, item);
            $element.closest('div.editrow').slideUp(500, function() {});
            return $scope.toggleItem($scope.items[idx + 1], null);
          });
        };
        $scope.saveDetailsForItem = function(record1, record2) {
          return $http.post($scope.settings.baseUrl + "/ng-save-item", {
            record1: record1,
            record2: record2,
            query: $scope.query
          }).then(function(response) {
            if (response.data && response.data.status === 'ok') {
              return response.data;
            } else {
              return $q.reject('cannot save details for location');
            }
          });
        };
        return $scope.loadDetailsForItem = function(id1, id2) {
          return $http.post($scope.settings.baseUrl + "/ng-item-details", {
            id1: id1,
            id2: id2
          }).then(function(response) {
            if (response.data) {
              return response.data;
            } else {
              return $q.reject('cannot load details for object');
            }
          });
        };
      }
    ]
  };
});

/*
//@ sourceMappingURL=translation-admin-item.map
*/
